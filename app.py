import asyncio
import io
import os
import tempfile
from contextlib import contextmanager

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ContentType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile
from dotenv import load_dotenv
import replicate
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import logging


load_dotenv()
BOT_TOKEN = os.environ["BOT_TOKEN"]
REPLICATE_API_TOKEN = os.environ["REPLICATE_API_TOKEN"]
replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)



# –ü–∞–º—è—Ç—å ¬´–Ω–∞ –∫–æ–ª–µ–Ω–∫–µ¬ª: –Ω–∞ –ø—Ä–æ–¥–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ Redis/–ë–î
USER_LAST_PHOTO = {}        # user_id -> bytes –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ–ª—Ñ–∏
USER_LAST_PROMPT = {}       # user_id -> –∫—Ä–∞—Ç–∫–∞—è –∏–¥–µ—è/–ø–æ–¥–ø–∏—Å—å

# –ù–∞–±–æ—Ä "–∫—Ä—É—Ç—ã—Ö" —Å—Ç–∏–ª–µ–π –ø–æ–¥ –∞–≤–∞—Ç–∞—Ä–∫–∏ (prompt –ø—Ä–µ—Å–µ—Ç—ã)
STYLES = {
    "real_raw":        "ultra realistic headshot, RAW photo look, soft studio light, skin texture, natural colors, detailed eyes, shallow depth of field, 85mm lens",
    "cinematic":       "cinematic portrait, dramatic rim light, volumetric light, film grain, color grading teal and orange, bokeh background",
    "cyberpunk":       "cyberpunk neon portrait, rainy night, neon reflections, holographic UI elements, high detail, futuristic vibes",
    "anime":           "high-quality anime portrait, detailed eyes, clean lineart, soft shading, vibrant palette",
    "pixar3d":         "3d stylized portrait, pixar-like, subsurface scattering, soft key light, studio render, high detail",
    "vogue":           "editorial fashion portrait, glossy lighting, beauty retouch, professional studio, elegant styling",
    "lofi_film":       "lofi film portrait, kodak portra feel, soft highlights, muted tones, nostalgic mood",
    "fantasy_elf":     "fantasy elf portrait, delicate face, ethereal light, intricate accessories, mystical atmosphere",
    "comic":           "comic book portrait, bold ink lines, halftone shading, high contrast, dynamic look",
    "pop_art":         "pop art portrait, bold colors, graphic shapes, clean background, poster look",
    "bw_classic":      "black and white classic portrait, strong contrast, soft key light, timeless look",
    "poster_graphic":  "graphic poster style portrait, minimal layout, strong typography accents, bold composition"
}

def styles_keyboard():
    buttons = []
    row = []
    for k in STYLES.keys():
        row.append(InlineKeyboardButton(text=k, callback_data=f"style:{k}"))
        if len(row) == 3:
            buttons.append(row); row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏—Ç–µ <b>—Å–≤–æ—ë —Ñ–æ—Ç–æ/—Å–µ–ª—Ñ–∏</b> (–∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ).\n"
        "–ü–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞ –∫–Ω–æ–ø–∫–µ ‚Äî –∏ —è –ø—Ä–∏—à–ª—é –≥–æ—Ç–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: /styles"
    )

@dp.message(Command("styles"))
async def list_styles(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∏–∂–µ üëá", reply_markup=styles_keyboard())


@dp.message(F.content_type == ContentType.PHOTO)
async def on_photo(m: Message):
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫ –≤ –ø–∞–º—è—Ç—å (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å aiogram 3.x)
    buf = io.BytesIO()
    try:
        # –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± (–µ—Å—Ç—å –≤ aiogram 3.x)
        await bot.download(m.photo[-1], destination=buf)
    except Exception:
        # fallback, –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç .download(...)
        file = await bot.get_file(m.photo[-1].file_id)
        await bot.download_file(file.file_path, buf)

    buf.seek(0)
    b = buf.getvalue()  # –±–µ–∑ await!

    USER_LAST_PHOTO[m.from_user.id] = b
    USER_LAST_PROMPT[m.from_user.id] = (m.caption or "").strip()

    await m.answer(
        "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å ‚Äî —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∞–≤–∞—Ç–∞—Ä–∫—É.",
        reply_markup=styles_keyboard()
    )


@dp.callback_query(F.data.startswith("style:"))
async def on_style_click(cq: CallbackQuery):
    user_id = cq.from_user.id
    key = cq.data.split(":", 1)[1]

    if user_id not in USER_LAST_PHOTO:
        await cq.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ (—Å–µ–ª—Ñ–∏).")
        await cq.answer()
        return

    if key not in STYLES:
        await cq.message.answer("–¢–∞–∫–æ–≥–æ —Å—Ç–∏–ª—è –Ω–µ—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ /styles")
        await cq.answer()
        return

    await cq.message.answer(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏–ª—å: <b>{key}</b> ‚Ä¶ 10‚Äì30 —Å–µ–∫.")
    await cq.answer()

    base_prompt = STYLES[key]
    extra = USER_LAST_PROMPT.get(user_id, "")
    prompt = (base_prompt + (f", {extra}" if extra else "")).strip()

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∫–∞–∫ file-like object (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö URL)
        image_bytes = USER_LAST_PHOTO[user_id]
        image_file = io.BytesIO(image_bytes)
        image_file.name = "input.jpg"  # –∏–º—è –Ω—É–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è multipart

        # –í–∫–ª—é—á–∏–º –±–æ–ª–µ–µ ¬´–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π¬ª –≤–∏–¥ –∏ –º—è–≥–∫–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–º
        inputs = {
            "prompt": prompt,
            "image_prompt": image_file,            # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Üí –±–µ–∑–æ–ø–∞—Å–Ω–æ
            "image_prompt_strength": 0.07,         # –±–∞–ª–∞–Ω—Å —Å—Ç–∏–ª—å/–∫–æ–º–ø–æ–∑–∏—Ü–∏—è
            "raw": True,                           # –±–æ–ª–µ–µ ¬´—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π¬ª —Ç–æ–Ω
            "aspect_ratio": "1:1",                 # –∞–≤–∞—Ç–∞—Ä-—Ñ–æ—Ä–º–∞—Ç
            # –º–æ–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å c safety_tolerance (1..6) –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }

        # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        output = replicate.run(
            "black-forest-labs/flux-1.1-pro-ultra",
            input=inputs
        )

        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FileOutput; –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ photo –∏–∑ –ø–∞–º—è—Ç–∏
        if isinstance(output, list):
            file_output = output[0]
        else:
            file_output = output  # –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª—è—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π

        img_bytes = file_output.read()
        await bot.send_photo(
            chat_id=user_id,
            photo=BufferedInputFile(img_bytes, filename=f"{key}.jpg"),
            caption=f"–ì–æ—Ç–æ–≤–æ! –°—Ç–∏–ª—å: {key}"
        )

    except Exception as e:
        await cq.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        
async def main():
    logging.info("Starting bot polling on Railway‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

