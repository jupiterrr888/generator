import asyncio
import io
import os
import logging
import zipfile
import tempfile
from typing import Dict, Any, List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, ContentType, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, BufferedInputFile
)
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

import requests
import replicate
from replicate.exceptions import ReplicateError

# ===================== ENV =====================
load_dotenv()
BOT_TOKEN = os.environ["BOT_TOKEN"]
REPLICATE_API_TOKEN = os.environ["REPLICATE_API_TOKEN"]

# –ë—ç–∫–µ–Ω–¥—ã –∏ –º–æ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —á–µ—Ä–µ–∑ ENV)
INSTANTID_MODEL   = os.getenv("INSTANTID_MODEL", "grandlineai/instant-id-photorealistic")
INSTANTID_VERSION = os.getenv("INSTANTID_VERSION", "").strip()  # —Ö—ç—à –≤–µ—Ä—Å–∏–∏ (–æ–ø—Ü.)

IPADAPTER_MODEL   = os.getenv("IPADAPTER_MODEL", "lucataco/ip-adapter-faceid")
IPADAPTER_VERSION = os.getenv("IPADAPTER_VERSION", "").strip()

FLUX_MODEL        = os.getenv("FLUX_MODEL", "black-forest-labs/flux-1.1-pro-ultra")
FLUX_VERSION      = os.getenv("FLUX_VERSION", "").strip()

# finetuned-–º–æ–¥–µ–ª—å (–∏–Ω—Ñ–µ—Ä–µ–Ω—Å –ø–æ finetune_id)
FINETUNED_MODEL   = os.getenv("FINETUNED_MODEL", "black-forest-labs/flux-1.1-pro-ultra-finetuned")
FINETUNED_VERSION = os.getenv("FINETUNED_VERSION", "").strip()

# —Ç—Ä–µ–Ω–µ—Ä (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π) ‚Äî –∑–∞–¥–∞–π –≤ ENV –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
LORA_TRAINER_MODEL = os.getenv("LORA_TRAINER_MODEL", "")   # –Ω–∞–ø—Ä. "black-forest-labs/flux-pro-trainer"

# –¥–ª—è LoRA-URL (–µ—Å–ª–∏ –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ finetune_id, –∞ –≤–µ—Å–∞)
LORA_APPLY_PARAM     = os.getenv("LORA_APPLY_PARAM", "lora_urls")  # –∏–ª–∏ "adapters"
LORA_SCALE_DEFAULT   = float(os.getenv("LORA_SCALE_DEFAULT", "0.7"))

# ===================== SDK / BOT =====================
replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# ===================== IN-MEMORY STATE (–Ω–∞ –ø—Ä–æ–¥–µ –≤—ã–Ω–µ—Å–∏ –≤ Redis/DB) =====================
USER_LAST_PHOTO: Dict[int, bytes] = {}
USER_LAST_PROMPT: Dict[int, str] = {}
USER_BACKEND: Dict[int, str] = {}   # "instantid" | "ipadapter" | "flux"
USER_TRAIN_SET: Dict[int, List[bytes]] = {}
# –í–∞—Ä–∏–∞–Ω—Ç finetune: {"finetune_id": str|None, "trigger": str|None, "enabled": bool, "status": "none|training|ready|failed"}
# –í–∞—Ä–∏–∞–Ω—Ç LoRA-URL: {"url": str|None, "enabled": bool, "status": "..."}  (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ)
USER_LORA: Dict[int, Dict[str, Any]] = {}

# ===================== STYLES (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –Ω–∞–±–æ—Ä) =====================
STYLES: Dict[str, Dict[str, str]] = {
    "real_raw": {"prompt": "ultra realistic headshot, RAW photo look, soft studio light, skin texture, natural colors, detailed eyes, shallow depth of field, 85mm lens"},
    "cinematic": {"prompt": "cinematic portrait, dramatic rim light, volumetric light, film grain, teal and orange color grading, background bokeh"},
    "cyberpunk": {"prompt": "cyberpunk neon portrait, rainy night, neon reflections, holographic HUD, high detail, futuristic vibes"},
    "vogue": {"prompt": "editorial fashion portrait, glossy lighting, beauty retouch, professional studio, elegant styling, magazine cover look"},
    "lofi_film": {"prompt": "lofi film portrait, kodak portra vibes, soft highlights, muted tones, nostalgic mood, film grain subtle"},
    "fantasy_elf": {"prompt": "fantasy elf portrait, ethereal rim light, delicate face, intricate accessories, mystical forest atmosphere"},
    "comic": {"prompt": "comic book portrait, bold ink lines, halftone shading, high contrast, dynamic pose, graphic look"},
    "pop_art": {"prompt": "pop art portrait, bold colors, graphic shapes, clean background, posterized look, contemporary design"},
    "bw_classic": {"prompt": "black and white classic portrait, strong contrast, soft key light, timeless look, studio photography"},
    "poster_graphic": {"prompt": "graphic poster style portrait, minimal layout, strong typography accents, bold composition, color blocking"},
    "studio_beauty": {"prompt": "beauty studio portrait, clamshell lighting, glossy skin, catchlights in the eyes, editorial makeup"},
    "baroque": {"prompt": "baroque oil painting portrait, chiaroscuro, rich textures, ornate details, museum quality"},
    # –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≤–º–µ—Å—Ç–æ noir / pixar3d / anime:
    "synthwave_neon": {"prompt": "synthwave neon portrait, 1980s retrofuturism, gradient sky, grid horizon, glowing rim light, high contrast, vibrant magenta and cyan, glossy finish"},
    "watercolor_paper": {"prompt": "hand-painted watercolor portrait on textured paper, soft edges, delicate washes, natural pigments, subtle bleed, organic imperfections, serene mood"},
    "mag_cutout": {"prompt": "magazine cutout collage portrait, torn paper edges, halftone dots, bold typography accents, layered shapes, playful composition, print texture"}
}

def styles_keyboard() -> InlineKeyboardMarkup:
    buttons, row = [], []
    for k in STYLES.keys():
        row.append(InlineKeyboardButton(text=k, callback_data=f"style:{k}"))
    # —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3
    grid = [list(keys) for keys in zip(*[iter(STYLES.keys())]*3)]
    buttons = [[InlineKeyboardButton(text=k, callback_data=f"style:{k}") for k in row3] for row3 in grid]
    rest = list(STYLES.keys())[len(grid)*3:]
    if rest:
        buttons.append([InlineKeyboardButton(text=k, callback_data=f"style:{k}") for k in rest])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def modes_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîí InstantID (1 —Ñ–æ—Ç–æ)", callback_data="mode:instantid"),
            InlineKeyboardButton(text="üîí IP-Adapter", callback_data="mode:ipadapter"),
            InlineKeyboardButton(text="üé® FLUX", callback_data="mode:flux"),
        ]
    ])

# ===================== HELPERS =====================
def _to_bytes_from_output(output: Any) -> bytes:
    """Replicate –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å url, —Å–ø–∏—Å–æ–∫, file-like. –ü—Ä–∏–≤–æ–¥–∏–º –∫ bytes."""
    obj = output[0] if isinstance(output, list) else output
    if hasattr(obj, "read"):
        return obj.read()
    if isinstance(obj, str) and obj.startswith("http"):
        r = requests.get(obj, timeout=60)
        r.raise_for_status()
        return r.content
    raise RuntimeError("Unknown output type from Replicate model")

def _ref_with_version(model_ref: str, version: str) -> str:
    """–°–æ–±–∏—Ä–∞–µ–º ref —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞."""
    return f"{model_ref}:{version}" if version else model_ref

async def _download_as_bytes(message: Message) -> bytes:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (photo/document) –∫–∞–∫ bytes; –¥–ª—è document –¢–µ–ª–µ–≥–∞ –Ω–µ —Å–∂–∏–º–∞–µ—Ç."""
    buf = io.BytesIO()
    if message.content_type == ContentType.PHOTO:
        await bot.download(message.photo[-1], destination=buf)
    elif message.content_type == ContentType.DOCUMENT:
        await bot.download(message.document, destination=buf)
    else:
        raise ValueError("Unsupported content type for image download")
    buf.seek(0)
    return buf.getvalue()

# ===================== GENERATORS =====================
def generate_with_instantid(face_bytes: bytes, prompt: str) -> bytes:
    face = io.BytesIO(face_bytes); face.name = "face.jpg"
    inputs = {
        "image": face,
        "prompt": prompt,
        "controlnet_conditioning_scale": 0.6,
    }
    ref = _ref_with_version(INSTANTID_MODEL, INSTANTID_VERSION)
    try:
        out = replicate.run(ref, input=inputs)
        return _to_bytes_from_output(out)
    except ReplicateError as e:
        # –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫ –Ω–∞ IP-Adapter, –µ—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/404
        if "404" in str(e) or "not be found" in str(e).lower():
            return generate_with_ipadapter(face_bytes, prompt)
        raise

def generate_with_ipadapter(face_bytes: bytes, prompt: str) -> bytes:
    face = io.BytesIO(face_bytes); face.name = "face.jpg"
    ref = _ref_with_version(IPADAPTER_MODEL, IPADAPTER_VERSION)
    try:
        out = replicate.run(ref, input={"face_image": face, "prompt": prompt})
    except Exception:
        face.seek(0)
        out = replicate.run(ref, input={"image": face, "prompt": prompt})
    return _to_bytes_from_output(out)

def generate_with_flux(image_bytes: bytes, prompt: str, lora_url: Optional[str] = None, lora_scale: float = LORA_SCALE_DEFAULT) -> bytes:
    image_file = io.BytesIO(image_bytes); image_file.name = "input.jpg"
    inputs: Dict[str, Any] = {
        "prompt": prompt,
        "image_prompt": image_file,
        "image_prompt_strength": 0.7,   # —Å–∏–ª—å–Ω–µ–µ –¥–µ—Ä–∂–∏–º –ª–∏—Ü–æ/–∫–æ–º–ø–æ–∑–∏—Ü–∏—é
        "raw": True,
        "aspect_ratio": "1:1",
    }
    if lora_url:
        if LORA_APPLY_PARAM == "lora_urls":
            inputs["lora_urls"] = [lora_url]
            inputs["lora_scales"] = [lora_scale]
        elif LORA_APPLY_PARAM == "adapters":
            inputs["adapters"] = [{"path": lora_url, "weight": lora_scale}]
        else:
            inputs["lora_urls"] = [lora_url]

    ref = _ref_with_version(FLUX_MODEL, FLUX_VERSION)
    out = replicate.run(ref, input=inputs)
    return _to_bytes_from_output(out)

def generate_with_flux_finetuned(prompt: str, finetune_id: str, finetune_strength: float = 1.0) -> bytes:
    """–ò–Ω—Ñ–µ—Ä–µ–Ω—Å –ø–æ finetune_id (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è finetuned-–º–æ–¥–µ–ª—å)."""
    ref = _ref_with_version(FINETUNED_MODEL, FINETUNED_VERSION)
    out = replicate.run(ref, input={
        "prompt": prompt,
        "finetune_id": finetune_id,
        "finetune_strength": finetune_strength,  # 0..2 (–æ–±—ã—á–Ω–æ 0.7‚Äì1.2)
        "raw": True,
        "aspect_ratio": "1:1",
    })
    return _to_bytes_from_output(out)

# ===================== FINETUNE TRAINING =====================
def _train_flux_finetune_sync(image_bytes_list: List[bytes], trigger_word: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞ (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∫–∞–∂–∏ –≤ LORA_TRAINER_MODEL)."""
    with tempfile.NamedTemporaryFile(suffix=".zip", delete=False) as tmp:
        with zipfile.ZipFile(tmp, "w") as zf:
            for i, b in enumerate(image_bytes_list):
                zf.writestr(f"img_{i:02d}.jpg", b)
        tmp.flush()
        zip_path = tmp.name

    if not LORA_TRAINER_MODEL:
        raise RuntimeError("LORA_TRAINER_MODEL is not set")

    # –æ—Ñ–∏—Ü. —Ç—Ä–µ–Ω–µ—Ä FLUX –æ–∂–∏–¥–∞–µ—Ç input_images (zip) + trigger_word + training_steps –∏ —Ç.–ø.
    ref = _ref_with_version(LORA_TRAINER_MODEL, "")
    out = replicate.run(ref, input={
        "input_images": open(zip_path, "rb"),
        "trigger_word": trigger_word,
        "training_steps": 300,
        "finetune_type": "lora",
        # "lora_rank": 32, "learning_rate": 1e-4, ...
    })
    if isinstance(out, str):
        return out
    if isinstance(out, dict) and "finetune_id" in out:
        return out["finetune_id"]
    raise RuntimeError(f"Unexpected trainer output: {type(out)}")

async def _train_and_notify(uid: int, imgs: List[bytes]):
    """–§–æ–Ω–æ–≤—ã–µ –æ–±—É—á–µ–Ω–∏–µ finetune, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞."""
    trigger = f"user_{uid}"  # —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ
    loop = asyncio.get_running_loop()
    try:
        finetune_id = await loop.run_in_executor(None, lambda: _train_flux_finetune_sync(imgs, trigger))
        USER_LORA[uid] = {"finetune_id": finetune_id, "trigger": trigger, "enabled": True, "status": "ready"}
        await bot.send_message(uid, f"‚úÖ –§–∏–Ω–µ—Ç—é–Ω –≥–æ—Ç–æ–≤ –∏ –≤–∫–ª—é—á—ë–Ω!\nID: <code>{finetune_id}</code>\n–†–µ–∂–∏–º FLUX ‚Üí /styles ‚Üí —Å—Ç–∏–ª—å.")
    except Exception as e:
        USER_LORA[uid] = {"finetune_id": None, "trigger": None, "enabled": False, "status": "failed"}
        logging.exception("LoRA/finetune training failed")
        await bot.send_message(uid, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")

# ===================== HANDLERS =====================
@dp.message(CommandStart())
async def start(m: Message):
    uid = m.from_user.id
    USER_BACKEND.setdefault(uid, "ipadapter")  # –¥–µ—Ñ–æ–ª—Ç ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π IP-Adapter
    USER_LORA.setdefault(uid, {"finetune_id": None, "trigger": None, "enabled": False, "status": "none"})
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ AI-–∞–≤–∞—Ç–∞—Ä-–±–æ—Ç.\n\n"
        "1) –ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ (–ª—É—á—à–µ –∫–∞–∫ <b>—Ñ–∞–π–ª</b> ‚Äî –±–µ–∑ —Å–∂–∞—Ç–∏—è).\n"
        "2) /styles ‚Äî –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å.\n"
        "3) /modes ‚Äî —Ä–µ–∂–∏–º: <b>InstantID</b> / <b>IP-Adapter</b> / <b>FLUX</b>.\n"
        "4) /train ‚Äî —Å–æ–±—Ä–∞—Ç—å 6‚Äì12 —Ñ–æ—Ç–æ (—Ñ–∞–π–ª—ã) –¥–ª—è —Ñ–∏–Ω–µ—Ç—é–Ω–∞ ‚Üí /finish.\n"
        "5) /lora_on, /lora_off ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å LoRA (–µ—Å–ª–∏ –µ—Å—Ç—å finetune).\n"
        "6) /set_finetune &lt;finetune_id&gt; ‚Äî –≤—Ä—É—á–Ω—É—é —É–∫–∞–∑–∞—Ç—å finetune_id (–µ—Å–ª–∏ —É–∂–µ –æ–±—É—á–µ–Ω).\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{USER_BACKEND[uid]}</b>"
    )

@dp.message(Command("styles"))
async def list_styles(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –Ω–∏–∂–µ üëá", reply_markup=styles_keyboard())

@dp.message(Command("modes"))
async def modes(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: InstantID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏–∑ 1 —Ñ–æ—Ç–æ.", reply_markup=modes_keyboard())

@dp.callback_query(F.data.startswith("mode:"))
async def switch_mode(cq: CallbackQuery):
    uid = cq.from_user.id
    mode = cq.data.split(":", 1)[1]
    USER_BACKEND[uid] = mode
    await cq.message.answer(f"–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: <b>{mode}</b>")
    await cq.answer()

@dp.message(F.content_type == ContentType.PHOTO)
async def on_photo(m: Message):
    b = await _download_as_bytes(m)
    USER_LAST_PHOTO[m.from_user.id] = b
    USER_LAST_PROMPT[m.from_user.id] = (m.caption or "").strip()
    await m.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–∂–º–∏ /styles –∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å.")

@dp.message(F.content_type == ContentType.DOCUMENT, F.document.mime_type.in_({"image/jpeg","image/png"}))
async def on_image_doc(m: Message):
    b = await _download_as_bytes(m)  # –±–µ–∑ —Å–∂–∞—Ç–∏—è
    USER_LAST_PHOTO[m.from_user.id] = b
    USER_LAST_PROMPT[m.from_user.id] = (m.caption or "").strip()
    await m.answer("üìé –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è. –ù–∞–∂–º–∏ /styles –∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å.")

@dp.callback_query(F.data.startswith("style:"))
async def on_style_click(cq: CallbackQuery):
    uid = cq.from_user.id
    key = cq.data.split(":", 1)[1]
    if uid not in USER_LAST_PHOTO:
        await cq.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ.")
        return await cq.answer()
    if key not in STYLES:
        await cq.message.answer("–¢–∞–∫–æ–≥–æ —Å—Ç–∏–ª—è –Ω–µ—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏ /styles")
        return await cq.answer()

    base_prompt = STYLES[key]["prompt"]
    extra = USER_LAST_PROMPT.get(uid, "")
    prompt = (base_prompt + (f", {extra}" if extra else "")).strip()

    info = USER_LORA.get(uid)
    backend = USER_BACKEND.get(uid, "ipadapter")

    await cq.message.answer(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é: <b>{key}</b> ‚Ä¶ 10‚Äì40 —Å–µ–∫.")
    await cq.answer()

    try:
        face_bytes = USER_LAST_PHOTO[uid]

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω FLUX –∏ –≥–æ—Ç–æ–≤ finetune ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (TEXT‚ÜíIMG)
        if backend == "flux" and info and info.get("enabled") and info.get("status") == "ready" and info.get("finetune_id"):
            trigger = info.get("trigger") or ""
            prompt_ft = (f"{trigger}, {prompt}").strip(", ")
            img_bytes = generate_with_flux_finetuned(prompt_ft, info["finetune_id"], finetune_strength=0.9)
        else:
            # –∏–Ω–∞—á–µ ‚Äî face-lock (InstantID/IP-Adapter) –∏–ª–∏ –æ–±—ã—á–Ω–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è FLUX
            if backend == "instantid":
                img_bytes = generate_with_instantid(face_bytes, prompt)
            elif backend == "ipadapter":
                img_bytes = generate_with_ipadapter(face_bytes, prompt)
            else:  # FLUX —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ
                lora_url = info.get("url") if info else None  # –µ—Å–ª–∏ –±—É–¥–µ—à—å –ø–æ–¥–∞–≤–∞—Ç—å LoRA-URL
                img_bytes = generate_with_flux(face_bytes, prompt, lora_url=lora_url)

        await bot.send_photo(
            chat_id=uid,
            photo=BufferedInputFile(img_bytes, filename=f"{key}.jpg"),
            caption=f"–ì–æ—Ç–æ–≤–æ! –†–µ–∂–∏–º: {backend}  |  –°—Ç–∏–ª—å: {key}"
        )
    except Exception as e:
        logging.exception("Generation error")
        await cq.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å/—Ä–µ–∂–∏–º –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

# ======== FINETUNE FLOW ========
@dp.message(Command("train"))
async def cmd_train(m: Message):
    uid = m.from_user.id
    USER_TRAIN_SET[uid] = []
    USER_LORA.setdefault(uid, {"finetune_id": None, "trigger": None, "enabled": False, "status": "none"})
    await m.answer(
        "–ó–∞–≥—Ä—É–∑–∏ 6‚Äì12 —Ñ–æ—Ç–æ –∫–∞–∫ <b>—Ñ–∞–π–ª—ã</b> (—Å–∫—Ä–µ–ø–∫–∞ ‚Üí —Ñ–∞–π–ª). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–ø–∏—à–∏ /finish.\n"
        "–°–æ–≤–µ—Ç—ã: —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã, —Å–≤–µ—Ç, —ç–º–æ—Ü–∏–∏; –ª–∏—Ü–æ –∫—Ä—É–ø–Ω–æ; –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."
    )

@dp.message(Command("finish"))
async def start_training(m: Message):
    uid = m.from_user.id
    imgs = USER_TRAIN_SET.get(uid, [])
    if len(imgs) < 6:
        return await m.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 6 —Ñ–æ—Ç–æ. –î–æ–∑–∞–≥—Ä—É–∑–∏ –∏ —Å–Ω–æ–≤–∞ /finish.")

    if not LORA_TRAINER_MODEL:
        return await m.answer(
            "‚ö†Ô∏è –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è LORA_TRAINER_MODEL –ø—É—Å—Ç–∞—è).\n"
            "–ó–∞–¥–∞–π –µ—ë –≤ Railway ‚Üí Variables (–Ω–∞–ø—Ä.: black-forest-labs/flux-pro-trainer) –∏ –ø–æ–≤—Ç–æ—Ä–∏."
        )

    USER_LORA[uid] = {"finetune_id": None, "trigger": None, "enabled": False, "status": "training"}
    await m.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–µ—Ç—é–Ω–∞‚Ä¶ –°–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")
    asyncio.create_task(_train_and_notify(uid, imgs))

@dp.message(Command("lora_on"))
async def lora_on(m: Message):
    uid = m.from_user.id
    info = USER_LORA.get(uid, {})
    if not (info.get("finetune_id") or info.get("url")):
        return await m.answer("LoRA/finetune –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ /train –∏–ª–∏ /set_finetune &lt;finetune_id&gt;.")
    info["enabled"] = True
    info["status"] = info.get("status", "ready")
    USER_LORA[uid] = info
    await m.answer("LoRA/finetune –≤–∫–ª—é—á—ë–Ω ‚úÖ")

@dp.message(Command("lora_off"))
async def lora_off(m: Message):
    uid = m.from_user.id
    info = USER_LORA.get(uid, {})
    info["enabled"] = False
    USER_LORA[uid] = info
    await m.answer("LoRA/finetune –≤—ã–∫–ª—é—á–µ–Ω ‚õîÔ∏è")

@dp.message(Command("set_finetune"))
async def set_finetune(m: Message):
    uid = m.from_user.id
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_finetune &lt;finetune_id&gt;")
    fid = parts[1].strip()
    USER_LORA[uid] = {"finetune_id": fid, "trigger": f"user_{uid}", "enabled": True, "status": "ready"}
    await m.answer("‚úÖ finetune_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –≤–∫–ª—é—á—ë–Ω. –†–µ–∂–∏–º FLUX ‚Üí /styles.")

# –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞—Ç–∞—Å–µ—Ç (–∫–∞–∫ —Ñ–∞–π–ª—ã)
@dp.message(F.content_type == ContentType.DOCUMENT, F.document.mime_type.in_({"image/jpeg","image/png"}))
async def collect_train_images(m: Message):
    uid = m.from_user.id
    if uid not in USER_TRAIN_SET:
        return  # –∏–≥–Ω–æ—Ä, –µ—Å–ª–∏ –Ω–µ /train
    b = await _download_as_bytes(m)
    USER_TRAIN_SET[uid].append(b)
    await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç. –°–µ–π—á–∞—Å: {len(USER_TRAIN_SET[uid])} —à—Ç.")

# –§–æ–ª–±—ç–∫ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
@dp.message()
async def fallback(m: Message):
    txt = (m.text or m.caption or "").strip()
    await m.answer("–Ø –∑–¥–µ—Å—å üëã –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–ª—É—á—à–µ –∫–∞–∫ —Ñ–∞–π–ª), –∑–∞—Ç–µ–º /styles. –†–µ–∂–∏–º—ã: /modes  |  –°–ø—Ä–∞–≤–∫–∞: /start")
    logging.info(f"Fallback update: content_type={m.content_type!r} text={txt!r}")

# ===================== MAIN =====================
async def main():
    logging.info("Starting bot polling‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
