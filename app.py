import asyncio
import io
import os
import logging
from typing import Dict, Any

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, ContentType, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, BufferedInputFile
)
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

import requests
import replicate
from replicate.exceptions import ReplicateError

# ===================== ENV =====================
load_dotenv()
BOT_TOKEN = os.environ["BOT_TOKEN"]
REPLICATE_API_TOKEN = os.environ["REPLICATE_API_TOKEN"]

# InstantID (–≤–µ—Ä—Å–∏—è –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ö—ç—à)
INSTANTID_MODEL   = os.getenv("INSTANTID_MODEL", "grandlineai/instant-id-photorealistic")
INSTANTID_VERSION = os.getenv("INSTANTID_VERSION", "").strip()  # –Ω–∞–ø—Ä. 03914a0c33...

# ===================== SDK / BOT =====================
replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# ===================== IN-MEMORY STATE =====================
USER_LAST_PHOTO: Dict[int, bytes] = {}
USER_LAST_PROMPT: Dict[int, str] = {}

# ===================== STYLES =====================
STYLES: Dict[str, Dict[str, str]] = {
    "real_raw": {"prompt": "ultra realistic headshot, RAW photo look, soft studio light, skin texture, natural colors, detailed eyes, shallow depth of field, 85mm lens"},
    "cinematic": {"prompt": "cinematic portrait, dramatic rim light, volumetric light, film grain, teal and orange color grading, background bokeh"},
    "cyberpunk": {"prompt": "cyberpunk neon portrait, rainy night, neon reflections, holographic HUD, high detail, futuristic vibes"},
    "vogue": {"prompt": "editorial fashion portrait, glossy lighting, beauty retouch, professional studio, elegant styling, magazine cover look"},
    "lofi_film": {"prompt": "lofi film portrait, kodak portra vibes, soft highlights, muted tones, nostalgic mood, film grain subtle"},
    "fantasy_elf": {"prompt": "fantasy elf portrait, ethereal rim light, delicate face, intricate accessories, mystical forest atmosphere"},
    "comic": {"prompt": "comic book portrait, bold ink lines, halftone shading, high contrast, dynamic pose, graphic look"},
    "pop_art": {"prompt": "pop art portrait, bold colors, graphic shapes, clean background, posterized look, contemporary design"},
    "bw_classic": {"prompt": "black and white classic portrait, strong contrast, soft key light, timeless look, studio photography"},
    "poster_graphic": {"prompt": "graphic poster style portrait, minimal layout, strong typography accents, bold composition, color blocking"},
    "studio_beauty": {"prompt": "beauty studio portrait, clamshell lighting, glossy skin, catchlights in the eyes, editorial makeup"},
    "baroque": {"prompt": "baroque oil painting portrait, chiaroscuro, rich textures, ornate details, museum quality"},
    # –Ω–æ–≤—ã–µ:
    "synthwave_neon": {"prompt": "synthwave neon portrait, 1980s retrofuturism, gradient sky, grid horizon, glowing rim light, high contrast, vibrant magenta and cyan, glossy finish"},
    "watercolor_paper": {"prompt": "hand-painted watercolor portrait on textured paper, soft edges, delicate washes, natural pigments, subtle bleed, organic imperfections, serene mood"},
    "mag_cutout": {"prompt": "magazine cutout collage portrait, torn paper edges, halftone dots, bold typography accents, layered shapes, playful composition, print texture"},
}

def styles_keyboard() -> InlineKeyboardMarkup:
    buttons, row = [], []
    for k in STYLES.keys():
        row.append(InlineKeyboardButton(text=k, callback_data=f"style:{k}"))
        if len(row) == 3:
            buttons.append(row); row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ===================== HELPERS =====================
def _to_bytes_from_output(output: Any) -> bytes:
    """Replicate –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å url, —Å–ø–∏—Å–æ–∫, file-like. –ü—Ä–∏–≤–æ–¥–∏–º –∫ bytes."""
    obj = output[0] if isinstance(output, list) else output
    if hasattr(obj, "read"):
        return obj.read()
    if isinstance(obj, str) and obj.startswith("http"):
        r = requests.get(obj, timeout=60)
        r.raise_for_status()
        return r.content
    raise RuntimeError("Unknown output type from Replicate model")

def _ref_with_version(model_ref: str, version: str) -> str:
    """–°–æ–±–∏—Ä–∞–µ–º ref —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞."""
    return f"{model_ref}:{version}" if version else model_ref

async def _download_as_bytes(message: Message) -> bytes:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (photo/document) –∫–∞–∫ bytes; –¥–ª—è document –¢–µ–ª–µ–≥–∞ –Ω–µ —Å–∂–∏–º–∞–µ—Ç."""
    buf = io.BytesIO()
    if message.content_type == ContentType.PHOTO:
        await bot.download(message.photo[-1], destination=buf)
    elif message.content_type == ContentType.DOCUMENT:
        await bot.download(message.document, destination=buf)
    else:
        raise ValueError("Unsupported content type for image download")
    buf.seek(0)
    return buf.getvalue()

# ===================== GENERATOR =====================
def generate_with_instantid(face_bytes: bytes, prompt: str) -> bytes:
    face = io.BytesIO(face_bytes); face.name = "face.jpg"
    inputs = {
        "image": face,                      # –ø–æ–¥–∞—ë–º —Ñ–∞–π–ª (–∞ –Ω–µ URL)
        "prompt": prompt,
        "controlnet_conditioning_scale": 0.6,
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: "num_inference_steps": 28, "guidance_scale": 3.5, "seed": 0,
    }
    ref = _ref_with_version(INSTANTID_MODEL, INSTANTID_VERSION)
    out = replicate.run(ref, input=inputs)
    return _to_bytes_from_output(out)

# ===================== HANDLERS =====================
@dp.message(CommandStart())
async def start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ AI-–∞–≤–∞—Ç–∞—Ä-–±–æ—Ç (InstantID —Ç–æ–ª—å–∫–æ).\n\n"
        "1) –ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ (–ª—É—á—à–µ –∫–∞–∫ <b>—Ñ–∞–π–ª</b> ‚Äî –±–µ–∑ —Å–∂–∞—Ç–∏—è).\n"
        "2) –ù–∞–∂–º–∏ /styles –∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å ‚Äî —è –ø—Ä–∏—à–ª—é –∞–≤–∞—Ç–∞—Ä.\n\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫—Ä—É–ø–Ω–æ–µ –ª–∏—Ü–æ –∞–Ω—Ñ–∞—Å/3‚ÅÑ4, –±–µ–∑ —Å–∏–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."
    )

@dp.message(Command("styles"))
async def list_styles(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –Ω–∏–∂–µ üëá", reply_markup=styles_keyboard())

@dp.message(F.content_type == ContentType.PHOTO)
async def on_photo(m: Message):
    b = await _download_as_bytes(m)   # photo (–¢–µ–ª–µ–≥–∞ —Å–∂–∏–º–∞–µ—Ç, –Ω–æ –æ–∫)
    USER_LAST_PHOTO[m.from_user.id] = b
    USER_LAST_PROMPT[m.from_user.id] = (m.caption or "").strip()
    await m.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ /styles –∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å.")

@dp.message(F.content_type == ContentType.DOCUMENT, F.document.mime_type.in_({"image/jpeg","image/png"}))
async def on_image_doc(m: Message):
    b = await _download_as_bytes(m)   # –±–µ–∑ —Å–∂–∞—Ç–∏—è ‚Äî –ª—É—á—à–µ –¥–ª—è —Å—Ö–æ–¥—Å—Ç–≤–∞
    USER_LAST_PHOTO[m.from_user.id] = b
    USER_LAST_PROMPT[m.from_user.id] = (m.caption or "").strip()
    await m.answer("üìé –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ /styles –∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å.")

@dp.callback_query(F.data.startswith("style:"))
async def on_style_click(cq: CallbackQuery):
    uid = cq.from_user.id
    key = cq.data.split(":", 1)[1]

    if uid not in USER_LAST_PHOTO:
        await cq.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ.")
        return await cq.answer()

    if key not in STYLES:
        await cq.message.answer("–¢–∞–∫–æ–≥–æ —Å—Ç–∏–ª—è –Ω–µ—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏ /styles")
        return await cq.answer()

    base_prompt = STYLES[key]["prompt"]
    extra = USER_LAST_PROMPT.get(uid, "")
    prompt = (base_prompt + (f", {extra}" if extra else "")).strip()

    await cq.message.answer(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é: <b>{key}</b> ‚Ä¶ 10‚Äì40 —Å–µ–∫.")
    await cq.answer()

    try:
        img_bytes = generate_with_instantid(USER_LAST_PHOTO[uid], prompt)
        await bot.send_photo(
            chat_id=uid,
            photo=BufferedInputFile(img_bytes, filename=f"{key}.jpg"),
            caption=f"–ì–æ—Ç–æ–≤–æ! –°—Ç–∏–ª—å: {key}"
        )
    except ReplicateError as e:
        logging.exception("InstantID Replicate error")
        await cq.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ InstantID: {e}\n–ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.exception("Generation error")
        await cq.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Ç–∏–ª—å.")

# –§–æ–ª–±—ç–∫ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
@dp.message()
async def fallback(m: Message):
    txt = (m.text or m.caption or "").strip()
    await m.answer("–Ø –∑–¥–µ—Å—å üëã –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–ª—É—á—à–µ –∫–∞–∫ —Ñ–∞–π–ª), –∑–∞—Ç–µ–º /styles. –°–ø—Ä–∞–≤–∫–∞: /start")
    logging.info(f"Fallback update: content_type={m.content_type!r} text={txt!r}")

# ===================== MAIN =====================
async def main():
    logging.info("Starting bot polling‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
